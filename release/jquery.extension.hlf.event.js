// Generated by CoffeeScript 1.3.1
(function() {
  var $, checkHoverIntent, clearHoverIntent, trackHoverIntent;

  $ = jQuery;

  $.extend(true, $, {
    hoverIntent: {
      sensitivity: 8,
      interval: 300
    },
    mouse: {
      x: {
        current: 0,
        previous: 0
      },
      y: {
        current: 0,
        previous: 0
      }
    }
  });

  checkHoverIntent = function(evt) {
    var $t, intentional, interval, m, sensitivity, timer;
    $t = $(this);
    intentional = $t.data('hoverIntent') || true;
    timer = $t.data('hoverIntentTimer') || null;
    sensitivity = $t.data('hoverIntentSensitivity') || $.hoverIntent.sensitivity;
    interval = $t.data('hoverIntentInterval') || $.hoverIntent.interval;
    m = $.mouse;
    return $t.data('hoverIntentTimer', setTimeout(function() {
      var type;
      intentional = Math.abs(m.x.previous - m.x.current) + Math.abs(m.y.previous - m.y.current) > sensitivity;
      intentional = intentional || evt.type === 'mouseleave';
      m.x.previous = evt.pageX;
      m.y.previous = evt.pageY;
      $t.data('hoverIntent', intentional);
      if (intentional) {
        switch (evt.type) {
          case 'mouseleave':
            if ($t.data('activeState') === true) {
              return console.log('activeState');
            }
            clearHoverIntent($t);
            break;
          case 'mouseout':
            type = 'mouseleave';
            break;
          case 'mouseover':
            type = 'mouseenter';
        }
        $t.trigger("true" + type);
        return console.log("true" + type);
      }
    }, interval));
  };

  trackHoverIntent = function(evt) {
    $.mouse.x.current = evt.pageX;
    return $.mouse.y.current = evt.pageY;
  };

  clearHoverIntent = function($t) {
    return clearTimeout($t.data('hoverIntentTimer'));
  };

  $.event.special.truemouseenter = {
    setup: function(data, namespaces) {
      return $(this).bind({
        mouseenter: checkHoverIntent,
        mousemove: trackHoverIntent
      });
    },
    teardown: function(data, namespaces) {
      return $(this).unbind({
        mouseenter: checkHoverIntent,
        mousemove: trackHoverIntent
      });
    }
  };

  $.event.special.truemouseleave = {
    setup: function(data, namespaces) {
      return $(this).bind('mouseleave', checkHoverIntent);
    },
    teardown: function(data, namespaces) {
      return $(this).unbind('mouseleave', checkHoverIntent);
    }
  };

}).call(this);

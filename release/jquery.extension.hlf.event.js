// Generated by CoffeeScript 1.3.1

/*
HLF Event jQuery Extension v1.0
Released under the MIT License
Written with jQuery 1.7.2
*/


(function() {
  var $;

  $ = jQuery;

  /*
  Composed of three parts:
  
  1. Extend main namespace with properties to store global state.
  2. Private functions to implement certain behaviors.
  3. Adapting the behaviors to custom events.
  
  Hover-intent
  ------------
  Basically a distance check with a delay to throttle mouse-enter. Allows for
  customization based on sensitivity to movement. Unlike the jQuery `mouseenter`
  and `mouseleave` events, these custom ones provide `pageX` and `pageY` values.
  */


  $.extend(true, $.hlf, {
    hoverIntent: {
      debug: false,
      sensitivity: 8,
      interval: 300,
      toString: function(context) {
        switch (context) {
          case 'data':
            return 'hlfHoverIntent';
          case 'log':
            return 'hover-intent:';
          default:
            return 'hlf.HoverIntent';
        }
      }
    },
    mouse: {
      x: {
        current: 0,
        previous: 0
      },
      y: {
        current: 0,
        previous: 0
      }
    }
  });

  (function(ns, m) {
    var check, clear, dat, log, nsDat, nsLog, track;
    nsDat = ns.toString('data');
    nsLog = ns.toString('log');
    dat = function(name) {
      return "" + nsDat + name;
    };
    log = ns.debug ? $.hlf.log : $.noop;
    check = function(evt) {
      var $t, intentional, interval, sensitivity, timer, trigger;
      trigger = function(evtType) {
        $t.trigger("true" + evtType);
        return log(nsLog, "true" + evtType);
      };
      $t = $(this);
      intentional = $t.data(dat()) || true;
      timer = $t.data(dat('Timer')) || null;
      sensitivity = $t.data(dat('Sensitivity')) || ns.sensitivity;
      interval = $t.data(dat('Interval')) || ns.interval;
      if ((timer != null) && evt.type === 'mouseleave') {
        clear($t);
        trigger(evt.type);
        return;
      }
      return $t.data(dat('Timer'), setTimeout(function() {
        var type;
        intentional = Math.abs(m.x.previous - m.x.current) + Math.abs(m.y.previous - m.y.current) > sensitivity;
        intentional = intentional;
        m.x.previous = evt.pageX;
        m.y.previous = evt.pageY;
        $t.data(dat(), intentional);
        if (intentional) {
          switch (evt.type) {
            case 'mouseout':
              type = 'mouseleave';
              break;
            case 'mouseover':
              type = 'mouseenter';
          }
          return trigger(type);
        }
      }, interval));
    };
    track = function(evt) {
      m.x.current = evt.pageX;
      return m.y.current = evt.pageY;
    };
    clear = function($t) {
      clearTimeout($t.data(dat('Timer')));
      return $t.removeData(dat('Timer'));
    };
    $.event.special.truemouseenter = {
      setup: function(data, namespaces) {
        return $(this).on({
          mouseenter: check,
          mousemove: track
        });
      },
      teardown: function(data, namespaces) {
        return $(this).off({
          mouseenter: check,
          mousemove: track
        });
      }
    };
    return $.event.special.truemouseleave = {
      setup: function(data, namespaces) {
        return $(this).on({
          mouseleave: check
        });
      },
      teardown: function(data, namespaces) {
        return $(this).off({
          mouseleave: check
        });
      }
    };
  })($.hlf.hoverIntent, $.hlf.mouse);

}).call(this);

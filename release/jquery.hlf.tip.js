// Generated by CoffeeScript 1.3.1
(function() {
  var $, SnapTip, Tip, ns,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  $ = jQuery;

  ns = $.hlf;

  ns.tip = {
    debug: false,
    toString: function(context) {
      switch (context) {
        case 'event':
          return '.hlf.tip';
        case 'data':
          return 'hlfTip';
        case 'class':
          return 'js-tips';
        case 'log':
          return 'hlf-tip:';
        default:
          return 'hlf.tip';
      }
    },
    defaults: (function(pre) {
      return {
        ms: {
          duration: {
            "in": 300,
            out: 300
          },
          delay: {
            "in": 300,
            out: 300
          }
        },
        cursorHeight: 6,
        dir: ['south', 'east'],
        safeToggle: true,
        cls: (function() {
          var cls;
          cls = {};
          _.each(['inner', 'content', 'stem', 'north', 'east', 'south', 'west', 'follow', 'trigger'], function(key) {
            return cls[key] = "" + pre + key;
          });
          cls.tip = 'js-tip';
          return cls;
        })()
      };
    })('js-tip-')
  };

  ns.snapTip = {
    debug: false,
    toString: function(context) {
      switch (context) {
        case 'event':
          return '.hlf.snapTip';
        case 'data':
          return 'hlfSnapTip';
        case 'class':
          return 'js-snap-tips';
        case 'log':
          return 'hlf-snap-tip:';
        default:
          return 'hlf.snapTip';
      }
    },
    defaults: (function(pre) {
      return $.extend(true, {}, ns.tip.defaults, {
        snap: {
          toTrigger: true,
          toXAxis: false,
          toYAxis: false
        },
        cls: (function() {
          var cls;
          cls = {
            snap: {}
          };
          _.each({
            toXAxis: 'x-side',
            toYAxis: 'y-side',
            toTrigger: 'trigger'
          }, function(val, key) {
            return cls.snap[key] = "" + pre + val;
          });
          cls.tip = 'js-tip js-snap-tip';
          return cls;
        })()
      });
    })('js-snap-tip-')
  };

  Tip = (function() {

    Tip.name = 'Tip';

    function Tip($ts, o, $ctx) {
      var _this = this;
      this.$ts = $ts;
      this.o = o;
      this.$ctx = $ctx;
      _.bindAll(this, '_onTriggerMouseMove');
      this.$tip = $('<div>');
      this.doStem = this.o.cls.stem !== '';
      this.doFollow = this.o.cls.follow !== '';
      this._state = 'asleep';
      this._currentTrigger = null;
      this.$ts.each(function(idx, el) {
        var $t;
        $t = $(el);
        $t.addClass(_this.o.cls.trigger);
        _this._saveTriggerContent($t);
        return _this._bindTrigger($t);
      });
      this._render();
      this._bind();
    }

    Tip.prototype._defaultHtml = function() {
      var c, cDir, containerClass, html, stemHtml,
        _this = this;
      c = this.o.cls;
      cDir = $.trim(_.reduce(this.o.dir, (function(cls, dir) {
        return "" + cls + " " + c[dir];
      }), ''));
      containerClass = $.trim([c.tip, c.follow, cDir].join(' '));
      if (this.doStem === true) {
        stemHtml = "<div class='" + c.stem + "'></div>";
      }
      return html = ("<div class=\"" + containerClass + "\"><div class=\"" + c.inner + "\">" + stemHtml + "<div class='" + c.content + "'>") + "</div></div></div>";
    };

    Tip.prototype._saveTriggerContent = function($t) {
      var title;
      title = $t.attr('title');
      if (title) {
        return $t.data(this._dat('Content'), title).removeAttr('title');
      }
    };

    Tip.prototype._bindTrigger = function($t) {
      var _this = this;
      $t.on(this._evt('truemouseenter'), function(evt) {
        _this._log(_this._nsLog, evt);
        return _this._onTriggerMouseMove(evt);
      });
      $t.on(this._evt('truemouseleave'), function(evt) {
        return _this.sleepByTrigger($t);
      });
      if (this.doFollow === true) {
        return $t.on('mousemove', this._onTriggerMouseMove);
      }
    };

    Tip.prototype._bind = function() {
      var _this = this;
      return this.$tip.on('mouseenter', function(evt) {
        _this._log(_this._nsLog, 'enter tip');
        if (_this._currentTrigger != null) {
          _this._currentTrigger.data('hlfIsActive', true);
          return _this.wakeByTrigger(_this._currentTrigger);
        }
      }).on('mouseleave', function(evt) {
        _this._log(_this._nsLog, 'leave tip');
        if (_this._currentTrigger != null) {
          _this._currentTrigger.data('hlfIsActive', false);
          return _this.sleepByTrigger(_this._currentTrigger);
        }
      });
    };

    Tip.prototype._render = function() {
      var html;
      if (this.$tip.html().length) {
        return false;
      }
      html = this.htmlOnRender();
      if (!((html != null) && html.length)) {
        html = this._defaultHtml();
      }
      this.$tip = $(html).addClass(this.o.cls.follow);
      return this.$tip.prependTo(this.$ctx);
    };

    Tip.prototype._inflateByTrigger = function($t) {
      return this.$tip.find("." + this.o.cls.content).text($t.data(this._dat('Content')));
    };

    Tip.prototype._onTriggerMouseMove = function(evt) {
      var $t,
        _this = this;
      if (!(evt.pageX != null)) {
        return false;
      }
      $t = ($t = $(evt.target)) && $t.hasClass(this.o.cls.trigger) ? $t : $t.closest(this.o.cls.trigger);
      if (!$t.length) {
        return false;
      }
      return this.wakeByTrigger($t, evt, function() {
        var offset;
        offset = {
          top: evt.pageY,
          left: evt.pageX
        };
        offset = _this.offsetOnTriggerMouseMove(evt, offset, $t) || offset;
        offset.top += _this.o.cursorHeight;
        _this.$tip.css(offset);
        return _this._log(_this._nsLog, '_onTriggerMouseMove', _this._state, offset);
      });
    };

    Tip.prototype.options = function() {
      return this.o;
    };

    Tip.prototype.tip = function() {
      return this.$tip;
    };

    Tip.prototype.isDir = function(dir) {
      return _.include(this.o.dir, dir);
    };

    Tip.prototype.wakeByTrigger = function($t, evt, cb) {
      var delay, duration, triggerChanged, wake, _ref,
        _this = this;
      triggerChanged = !$t.is(this._currentTrigger);
      if (triggerChanged) {
        this._inflateByTrigger($t);
        this._currentTrigger = $t;
      }
      if (this._state === 'awake' && (cb != null)) {
        cb();
        this._log(this._nsLog, 'quick update');
        return true;
      }
      if (evt != null) {
        this._log(this._nsLog, evt.type);
      }
      if ((_ref = this._state) === 'awake' || _ref === 'waking') {
        return false;
      }
      delay = this.o.ms.delay["in"];
      duration = this.o.ms.duration["in"];
      wake = function() {
        _this.onShow(triggerChanged, evt);
        return _this.$tip.fadeIn(duration, function() {
          if (triggerChanged) {
            if (cb != null) {
              cb();
            }
          }
          if (_this.o.safeToggle === true) {
            _this.$tip.siblings(_this.o.cls.tip).fadeOut();
          }
          _this.afterShow(triggerChanged, evt);
          return _this._state = 'awake';
        });
      };
      if (this._state === 'sleeping') {
        this._log(this._nsLog, 'clear sleep');
        clearTimeout(this._sleepCountdown);
        duration = 0;
        wake();
      } else if ((evt != null) && evt.type === 'truemouseenter') {
        triggerChanged = true;
        this._state = 'waking';
        this._wakeCountdown = setTimeout(wake, delay);
      }
      return true;
    };

    Tip.prototype.sleepByTrigger = function($t) {
      var _this = this;
      if (this._state !== 'awake') {
        return false;
      }
      this._state = 'sleeping';
      clearTimeout(this._wakeCountdown);
      this._sleepCountdown = setTimeout(function() {
        _this.onHide();
        return _this.$tip.fadeOut(_this.o.ms.duration.out, function() {
          _this._state = 'asleep';
          return _this.afterHide();
        });
      }, this.o.ms.delay.out);
      return true;
    };

    Tip.prototype.onShow = function(triggerChanged, evt) {};

    Tip.prototype.onHide = $.noop;

    Tip.prototype.afterShow = function(triggerChanged, evt) {};

    Tip.prototype.afterHide = $.noop;

    Tip.prototype.htmlOnRender = $.noop;

    Tip.prototype.offsetOnTriggerMouseMove = function(evt, offset, $t) {
      return false;
    };

    return Tip;

  })();

  SnapTip = (function(_super) {

    __extends(SnapTip, _super);

    SnapTip.name = 'SnapTip';

    function SnapTip($ts, o, $ctx) {
      var _this = this;
      SnapTip.__super__.constructor.call(this, $ts, o, $ctx);
      this.o.snap.toTrigger = this.o.snap.toXAxis === true || this.o.snap.toYAxis === true;
      this._offsetStart = null;
      _.each(this.o.snap, function(active, prop) {
        if (active) {
          return _this.$tip.addClass(_this.o.cls.snap[prop]);
        }
      });
    }

    SnapTip.prototype._moveToTrigger = function($t, baseOffset) {
      var offset;
      offset = $t.offset();
      if (this.o.snap.toXAxis === true) {
        if (this.isDir('south')) {
          offset.top += $t.outerHeight();
        }
        if (this.o.snap.toYAxis === false) {
          offset.left = baseOffset.left - (this.$tip.outerWidth() - 12) / 2;
        }
      }
      if (this.o.snap.toYAxis === true) {
        if (this.isDir('east')) {
          offset.left += $t.outerWidth();
        }
        if (this.o.snap.toXAxis === false) {
          offset.top = baseOffset.top - $t.outerHeight() / 2;
        }
      }
      return offset;
    };

    SnapTip.prototype._bindTrigger = function($t) {
      var _this = this;
      SnapTip.__super__._bindTrigger.call(this, $t);
      return $t.on(this._evt('truemouseleave'), function(evt) {
        return _this._offsetStart = null;
      });
    };

    SnapTip.prototype.onShow = function(triggerChanged, evt) {
      if (triggerChanged === true) {
        return this.$tip.css('visibility', 'hidden');
      }
    };

    SnapTip.prototype.afterShow = function(triggerChanged, evt) {
      if (triggerChanged === true) {
        this.$tip.css('visibility', 'visible');
        return this._offsetStart = {
          top: evt.pageY,
          left: evt.pageX
        };
      }
    };

    SnapTip.prototype.offsetOnTriggerMouseMove = function(evt, offset, $t) {
      var newOffset;
      newOffset = _.clone(offset);
      if (this.o.snap.toTrigger === true) {
        newOffset = this._moveToTrigger($t, newOffset);
      } else {
        if (this.o.snap.toXAxis === true) {
          newOffset.top = this._offsetStart.top;
          this._log(this._nsLog, 'xSnap');
        }
        if (this.o.snap.toYAxis === true) {
          newOffset.left = this._offsetStart.left;
          this._log(this._nsLog, 'ySnap');
        }
      }
      return newOffset;
    };

    return SnapTip;

  })(Tip);

  $.fn.tip = ns.createPlugin(ns.tip, Tip, true);

  $.fn.snapTip = ns.createPlugin(ns.snapTip, SnapTip, true);

}).call(this);
